"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Switch = void 0;
const util_1 = require("util");
class Switch {
    constructor(checkBox, divClass, divClassName, addtnlCheckBoxArray, addtnlClassNameArray) {
        this.activateFilters(checkBox, divClass, divClassName, addtnlCheckBoxArray, addtnlClassNameArray);
    }
    static mixStatus(currentStatus, oldStatus) {
        const statusArray = oldStatus.split(Switch.JOIN_CHAR);
        statusArray.push(currentStatus);
        const sortedUniqueStatusArray = [...new Set(statusArray)].sort();
        return sortedUniqueStatusArray.join(Switch.JOIN_CHAR);
    }
    activateFilters(checkBox, divClass, divClassName, addtnlCheckBoxArray, addtnlClassNameArray) {
        checkBox.change(() => {
            if (checkBox.is(":checked")) {
                divClass.show();
                if (!(0, util_1.isNullOrUndefined)(addtnlCheckBoxArray)) {
                    addtnlCheckBoxArray.forEach((addtnlCheckBox, index) => {
                        const mixedDualClass = Switch.mixStatus(addtnlClassNameArray[index], divClassName);
                        const mixedClassDiv = $("." + mixedDualClass);
                        mixedClassDiv.show();
                    });
                    const mixedClass = Switch.mixStatus(addtnlClassNameArray[0], divClassName);
                    const allMixedClass = Switch.mixStatus(addtnlClassNameArray[1], mixedClass);
                    const allMixedClassDiv = $("." + allMixedClass);
                    allMixedClassDiv.show();
                }
            }
            else {
                divClass.hide();
                if (!(0, util_1.isNullOrUndefined)(addtnlCheckBoxArray)) {
                    let allUnchecked = true;
                    addtnlCheckBoxArray.forEach((addtnlCheckBox, index) => {
                        if (!addtnlCheckBox.is(":checked")) {
                            const mixedClass = Switch.mixStatus(addtnlClassNameArray[index], divClassName);
                            const mixedClassDiv = $("." + mixedClass);
                            mixedClassDiv.hide();
                        }
                        else {
                            allUnchecked = false;
                        }
                    });
                    if (allUnchecked) {
                        const mixedClass = Switch.mixStatus(addtnlClassNameArray[0], divClassName);
                        const allMixedClass = Switch.mixStatus(addtnlClassNameArray[1], mixedClass);
                        const allMixedClassDiv = $("." + allMixedClass);
                        allMixedClassDiv.hide();
                    }
                }
            }
        });
    }
}
exports.Switch = Switch;
Switch.JOIN_CHAR = "\\.";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlbmRlci9uYXZpZ2F0aW9uL1N3aXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBeUM7QUFPekMsTUFBYSxNQUFNO0lBaUNmLFlBQ0ksUUFBa0MsRUFBRSxRQUFnQyxFQUFFLFlBQXFCLEVBQzNGLG1CQUFnRCxFQUFFLG9CQUErQjtRQUM3RSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDMUcsQ0FBQztJQXBCTyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQXFCLEVBQUUsU0FBaUI7UUFDN0QsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pFLE9BQU8sdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBMkJPLGVBQWUsQ0FDbkIsUUFBa0MsRUFBRSxRQUFnQyxFQUFFLFlBQXFCLEVBQzNGLG1CQUFnRCxFQUFFLG9CQUErQjtRQUM3RSxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNqQixJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3pCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLElBQUEsd0JBQWlCLEVBQUMsbUJBQW1CLENBQUMsRUFBRTtvQkFDekMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFO3dCQUNsRCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO3dCQUNuRixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLGNBQWMsQ0FBMkIsQ0FBQzt3QkFDeEUsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN6QixDQUFDLENBQUMsQ0FBQztvQkFFSCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO29CQUMzRSxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUM1RSxNQUFNLGdCQUFnQixHQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUEyQixDQUFDO29CQUMzRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDM0I7YUFDSjtpQkFBTTtnQkFDSCxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxJQUFBLHdCQUFpQixFQUFDLG1CQUFtQixDQUFDLEVBQUU7b0JBQ3pDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztvQkFDeEIsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFO3dCQUNsRCxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRTs0QkFDaEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzs0QkFDL0UsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQTJCLENBQUM7NEJBQ3BFLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQzt5QkFDeEI7NkJBQU07NEJBQ0gsWUFBWSxHQUFHLEtBQUssQ0FBQzt5QkFDeEI7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7b0JBRUgsSUFBSSxZQUFZLEVBQUU7d0JBQ2QsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzt3QkFDM0UsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQzt3QkFDNUUsTUFBTSxnQkFBZ0IsR0FBSSxDQUFDLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBMkIsQ0FBQzt3QkFDM0UsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7cUJBQzNCO2lCQUNKO2FBQ0o7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7O0FBMUZMLHdCQTJGQztBQXBGMEIsZ0JBQVMsR0FBRyxLQUFLLENBQUMifQ==